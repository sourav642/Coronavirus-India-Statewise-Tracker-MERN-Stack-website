{"version":3,"sources":["App_Util.js","App.js","serviceWorker.js","index.js"],"names":["API_Service","axios","get","then","response","data","state","params","serviceObj","resultList","props","dataList","graph_data","loading","Total","self","this","getResult","res","console","log","setState","pop","stateName","getTrends","List","horizontal","relaxed","inverted","Item","Content","Header","confirmed","active","recovered","deaths","class","style","color","href","map","row","Modal","basic","size","trigger","Icon","name","link","onClick","graphData","closeIcon","icon","content","concat","Loader","line_chart","width","height","id","role","Menu","target","alt","Date","getYear","Flag","Component","Boolean","window","location","hostname","match","styleLink","document","createElement","rel","head","appendChild","ReactDOM","render","StrictMode","App","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f7d2ffa8.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\n\r\nexport default class API_Service{\r\n    getResult() {\r\n        return axios.get('/state-wise-data').then(response => response.data);\r\n    }\r\n    getTrends(state){\r\n        return axios.get('/recent-trends',{params:{'state':state}}).then(response => response.data);\r\n    }\r\n}\r\n","import  React, { Component } from  'react';\r\nimport  API_Service  from  './App_Util';\r\nimport { Header,Modal,Icon,Loader,List,Flag,Menu,Popup} from 'semantic-ui-react'\r\nimport \"./index.css\";\r\nimport { LineChart} from 'react-chartkick'\r\nimport 'chart.js'\r\n\r\n\r\n\r\nconst  serviceObj  =  new  API_Service();\r\nclass  resultList  extends  Component {\r\n\r\n  constructor(props) {\r\n      super(props);\r\n      this.state  = {\r\n          dataList: [],\r\n          graph_data: {},\r\n          loading : false,\r\n          Total : {},\r\n      };\r\n  }\r\n\r\ncomponentDidMount() {\r\n  var  self  =  this;\r\n  serviceObj.getResult().then(function (res) {\r\n    console.log('Data Received: /state-wise-list');\r\n    self.setState({ dataList: res , Total : res.pop()})\r\n\r\n  });\r\n}\r\n\r\ngraphData(stateName) {\r\n  var self = this;\r\n  self.setState({loading:true},()=>{serviceObj.getTrends(stateName).then(function (res) {\r\n    console.log(`Data Received: /recent-treds?state=${stateName}`);\r\n    self.setState({ loading:false, graph_data: res})\r\n  });\r\n});\r\n}\r\n\r\n\r\nrender(){\r\nreturn(\r\n  <div>\r\n    <h3>Covid19 INDIA: Live Stats</h3>\r\n  <h2>{\r\n      // Display Total data at the top\r\n      <List horizontal relaxed inverted> \r\n      <List.Item >\r\n        <List.Content>\r\n          <List.Header>Confirmed</List.Header>\r\n          {this.state.Total.confirmed}\r\n        </List.Content>\r\n      </List.Item>\r\n      <List.Item>\r\n        <List.Content>\r\n          <List.Header>Active</List.Header>\r\n          {this.state.Total.active}\r\n        </List.Content>\r\n      </List.Item>\r\n      <List.Item>\r\n        <List.Content>\r\n          <List.Header>Recovered</List.Header>\r\n          {this.state.Total.recovered}\r\n        </List.Content>\r\n      </List.Item>\r\n      <List.Item>\r\n        <List.Content>\r\n          <List.Header>Deaths</List.Header>\r\n          {this.state.Total.deaths}\r\n        </List.Content>\r\n      </List.Item>\r\n      </List>}\r\n    </h2>\r\n\r\n      <table class = \"Table\">\r\n        <caption style={{color:'grey'}}>Source:  <a href = \"https://www.covid19india.org/\" class=\"Redirect\">Covid19India</a>\r\n          {', '}\r\n          <a href = \"https://www.mohfw.gov.in/\" class=\"Redirect\">MOHFW</a>\r\n        </caption>\r\n        <thead> \r\n            <tr>\r\n              <th ><h1>State</h1></th>\r\n              <th ><h1>Confirmed</h1></th>\r\n              <th ><h1>Active</h1></th>\r\n              <th ><h1>Recovered</h1></th>\r\n              <th ><h1>Deaths</h1></th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n          {this.state.dataList.map(row =>\r\n            <tr>\r\n              <td> {row.state} {'\\t\\t'}               \r\n          <Modal basic size = 'large' trigger = {<Icon name='chart line' link onClick={() => this.graphData(row.state)}/>}closeIcon>\r\n                <Header icon='chart line' content={row.state.concat(' - Recent Trends')} />\r\n                  {this.state.loading? <Loader>Loading...</Loader>:\r\n                  <Modal.Content>\r\n                    <LineChart data={this.state.graph_data.line_chart} width='95%' height=\"400px\"/>\r\n                  </Modal.Content>}\r\n                </Modal>\r\n              </td>\r\n              <td>{row.confirmed}</td>\r\n              <td>{row.active}</td>\r\n              <td>{row.recovered}</td>\r\n              <td>{row.deaths}</td>\r\n            </tr>\r\n          )}\r\n        </tbody>\r\n      </table>\r\n      <footer id=\"colophon\" class=\"site-footer\" role=\"contentinfo\">\r\n  <div class=\"social-wrapper\">\r\n  <ul>\r\n  <li>\r\n  <Menu.Item\r\n      href=\"https://www.linkedin.com/in/souravac-4a1555164/\"\r\n      target=\"_blank\"\r\n      class = \"Linkedin\"\r\n  >\r\n      <Icon name='linkedin' link color='blue' size='big' alt=\"Linkedin Logo\" class=\"Linkedin\"/>\r\n      </Menu.Item>\r\n  </li>\r\n  <li>\r\n    <Menu.Item\r\n      href=\"https://github.com/sourav642\"\r\n      target=\"_blank\"\r\n      class=\"Git\"\r\n    >\r\n      <Icon name='github' link size='big' color ='grey' alt=\"Github Logo\" class=\"Git\"/>\r\n      </Menu.Item>\r\n  </li>\r\n  \r\n    </ul>\r\n  </div>\r\n\r\n  <p class=\"footer-nav\" >\r\n  Copyright &copy;  {1900 + new Date().getYear()} (Beta) | Made with  <Icon color='pink' name='heart' /> in <Flag name=\"in\" width='100px' height='1px'/> by <a class=\"link\" href=\"https://www.linkedin.com/in/souravac-4a1555164/\">@Sourav</a>\r\n  </p>\r\n</footer>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default resultList;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n// TODO: Switch to https://github.com/palmerhq/the-platform#stylesheet when it will be stable\nconst styleLink = document.createElement(\"link\");\nstyleLink.rel = \"stylesheet\";\nstyleLink.href = \"https://cdn.jsdelivr.net/npm/semantic-ui/dist/semantic.min.css\";\ndocument.head.appendChild(styleLink);\n\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}